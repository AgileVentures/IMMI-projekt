- progress_bar_class = 'progress-bar'
- percent_text_class = 'percent-text'

%header.entry-header
  %h1{ class: with_admin_css_class_if_needed(@current_user, ['entry-title']) }=  t('.title', name: @user.full_name)


.entry-content
  #user-checklists
    - unless @user_checklists.empty?
      = arranged_tree_as_list(@user_checklists.arrange,
           { sort_by: [:list_position],
           list_type: 'ol',
            ul_class: ['checklist'],
            ul_class_top: ['top'],
            ul_class_children: ['children', 'collapse', 'show'],
            ul_id_method: ul_id,
            li_class: ['checklist-item'],
            li_class_top: ['root'],
            li_id_method: li_id }) do | child_entry |

        - child_entry_li_id = li_id.call(child_entry)
        - disabled_setting = { }

        - if child_entry.has_children?
          - children_ul_id = "##{ ul_id.call(child_entry) }"
          - disabled_setting = { disabled: true }

          %i{ class:'expand-collapse-toggle fa fa-angle-down' ,'aria-controls': children_ul_id, 'aria-expanded': 'true', 'data-toggle': 'collapse', href: children_ul_id, role: 'button' }

        = check_box_tag("completed-checkbox-#{ child_entry_li_id }", 'checked', child_entry.all_completed?, { class: "checkbox-date-completed",
           onchange:"toggleCompletedCheckbox(#{ current_user.id }, #{ child_entry.id }, '#{ child_entry_li_id }')" }.merge(disabled_setting))

        %span.name{ class: list_entry_css_classes(child_entry) }
          = child_entry.name

        %span.date-completed
          - if  child_entry.all_completed?
            Date completed: #{ child_entry.date_completed.to_date }

        -# only show progress bar for the top level items
        - if child_entry.root?
          = render partial: 'shared/progress_bar', locals: {  percent_complete: child_entry.percent_complete }



:javascript

  // FIXME - DRY with show_progress javascript

  const progressBarClass = ".#{ progress_bar_class }";
  const percentTextClass = ".#{ percent_text_class }";


  $(".expand-collapse-toggle").on("click",function(){
    $(this).toggleClass("fa-angle-down");
    $(this).toggleClass("fa-angle-up");
  });


  function toggleCompletedCheckbox(userId, checklistId, elementId) {
      let ajaxPostURL = "/en/anvandare/" + userId + "/lista/" + checklistId + "/all_changed_by_completion_toggle";
      $.post( ajaxPostURL,  updateDateSuccessfulFor); // FIXME catch error and display as an alert
  }


  // Loop through all items returned in the response and update their date completed display.
  function updateDateSuccessfulFor(responseData) {
    let changedChecklists = responseData.changed_checklists;

    changedChecklists.forEach(function(checklist) {

      let checklistLiID = ("#li-id-" + String(checklist['checklist_id']));
      let checklistElement = $(checklistLiID);
      let progressBar = checklistElement.closest(".root").find(progressBarClass);
      let newPercentComplete = checklist['overall_percent_complete'];
      let dateCompleted = checklistElement.find('.date-completed');

      updateProgressBar(newPercentComplete, progressBar);

      let checklistDateCompleted = checklist['date_completed'];
      dateCompleted.text(dateCompletedText(checklistDateCompleted));
      setCheckboxBasedOnDateCompleted(checklistElement, checklistDateCompleted)
    }
    );
  }

  // return the text to display for the date completed
  function dateCompletedText(dateCompleted = null) {
    if (dateCompleted == null ) {
      return "";
    }
    else {
      // FIXME i18n for date completed
      return "Date completed: " +  dateCompleted;
    }
  }


  function updateProgressBar(progressPercent = 0, progressBar = $(progressBarClass)) {
    let percentText = progressBar.find(percentTextClass);
    let progressPercentString = progressPercent + "%";
    percentText.text(progressPercentString + " #{ t('.complete') }");
    progressBar.innerWidth(progressPercentString);
    progressBar.attr('aria-valuenow', progressPercent);
  }


  function setCheckboxBasedOnDateCompleted(element, dateCompleted) {
    let checkBox = element.find('.checkbox-date-completed');
    checkBox.checked = !!dateCompleted  // this turns null and empty Strings into false (a Boolean)
  }
