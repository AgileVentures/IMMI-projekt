@startuml

!include plantuml-ae-style.iuml

'skinparam ActivityDiamondBackgroundColor white

title Make a Payment and Update Membership Status\n\nafter refactoring, using MembershipUpdater observer 23 Dec. 2017\n


HipsService -> PaymentsController: webhook


PaymentsController -> Payment: find(payment.id)
Payment -> PaymentsController: payment
PaymentsController -> Payment: order_to_payment_status
Payment -> PaymentsController: status

...

HipsService -> PaymentsController: success
activate PaymentsController


PaymentsController -> Payment: find(params[:id])
Payment -> PaymentsController: payment

PaymentsController -> Payment: successfully_completed

activate Payment

Payment -> Payment: update(status: SUCCESSFUL)
Payment -> Payment: notify_observers(self)

activate MembershipStatusUpdater

Payment -> MembershipStatusUpdater: payment_made(payment)

deactivate Payment


MembershipStatusUpdater -> MembershipStatusUpdater: update_membership_status(payment.user)

note right of MembershipStatusUpdater #lightYellow
 MembershipStatusUpdater is responsible for knowing if membership requirements have been met
end note

MembershipStatusUpdater -> MembershipRequirements: satisfied?(user)
MembershipRequirements -> MembershipStatusUpdater: [true | false] (assume true for this example)

MembershipStatusUpdater -> User: member?
User -> MembershipStatusUpdater: [true | false] (assume false for this example)


== grant membership ==

MembershipStatusUpdater -> MembershipStatusUpdater: grant_membership(user, send_email: ...))

note right of MembershipStatusUpdater #lightYellow
 MembershipStatusUpdater is responsible for knowing what to do to grant membership
end note


User -> User: issue_membership_number

MembershipStatusUpdater -> User: update( member: true, membership_number: ...)
MembershipStatusUpdater -> MemberMailer: membership_granted(user)

== end grant membership ==

deactivate MembershipStatusUpdater


PaymentsController -> HipsService: head :ok

deactivate PaymentsController

...

HipsService -> PaymentsController: response.parsed_response
deactivate HipsService

PaymentsController -> Payment: order_to_payment_status(hips_order['status'])
Payment -> PaymentsController: status

PaymentsController -> Payment: save!

...
HipsService -> PaymentsController: success



@enduml
